<%- include('../layout/userLayouts/header') -%>
    <style>
        .choose-address {
            margin-bottom: 20px;
        }

        .address-list {
            display: flex;
            flex-direction: column;
        }

        .address-item {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            cursor: pointer;
        }

        .address-item input {
            margin-right: 10px;
        }


        /* Modal Styles */
        .modal-content {
            background: linear-gradient(to right, #FFDAB9, #FFA07A);
        }

        .modal-title {
            color: #333;
        }

        .coupon-container {
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 10px;
        }

        .coupon-container p {
            color: #333;
            margin: 0;
        }

        .coupon-container p.text-success {
            font-weight: bold;
            color: #28a745;
        }

        .coupon-container p.text-primary {
            color: #007bff;
        }

        .coupon-container p.text-muted {
            color: #6c757d;
        }
    </style>


    <body>

        <!-- Start Header Area -->
        <header class="header_area sticky-header">
            <div class="main_menu">
                <nav class="navbar navbar-expand-lg navbar-light main_box">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <a class="navbar-brand logo_h" href="index.html"><img src="img/logo.png" alt=""></a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse"
                            data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
                            aria-expanded="false" aria-label="Toggle navigation">
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                        </button>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <!-- <p>User Data: <%= JSON.stringify(locals.user) %></p> -->

                        <div class="collapse navbar-collapse offset" id="navbarSupportedContent">
                            <ul class="nav navbar-nav menu_nav ml-auto">
                                <li class="nav-item active"><a class="nav-link" href="/home">Home</a></li>
                                <li class="nav-item submenu dropdown">
                                    <a href="/shop" class="nav-link dropdown-toggle" role="button"
                                        aria-haspopup="true">Shop</a>
                                </li>
                                <li class="nav-item "><a class="nav-link" href="#">about</a></li>

                                <li class="nav-item"><a class="nav-link" href="#">Contact</a></li>
                                <li class="nav-item submenu dropdown">
                                    <a href="#" class="nav-link dropdown-toggle" data-toggle="dropdown" role="button"
                                        aria-haspopup="true" aria-expanded="false"><i class="fa-solid fa-user"></i></a>
                                    <ul class="dropdown-menu">
                                        <% if (locals.user) { %>
                                            <li class="nav-item"><a class="nav-link" href="/profile">Profile</a></li>
                                            <li class="nav-item"><a class="nav-link" href="/logout">Logout</a></li>
                                            <% } else { %>
                                                <li class="nav-item"><a class="nav-link" href="/login">Login</a></li>
                                                <% } %>
                                    </ul>
                                </li>

                            </ul>
                            <ul class="nav navbar-nav navbar-right">
                                <li class="nav-item"><a href="/cart" class="cart"><span class="ti-bag"></span></a></li>
                                <li class="nav-item">
                                    <button class="search"><span class="lnr lnr-magnifier" id="search"></span></button>
                                </li>
                            </ul>
                        </div>
                    </div>
                </nav>
            </div>
            <div class="search_input" id="search_input_box">
                <div class="container">
                    <form class="d-flex justify-content-between">
                        <input type="text" class="form-control" id="search_input" placeholder="Search Here">
                        <button type="submit" class="btn"></button>
                        <span class="lnr lnr-cross" id="close_search" title="Close Search"></span>
                    </form>
                </div>
            </div>
        </header>
        <!-- End Header Area -->

        <!-- Start Banner Area -->
        <section class="banner-area organic-breadcrumb">
            <div class="container">
                <div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
                    <div class="col-first">
                        <h1>Checkout</h1>
                        <nav class="d-flex align-items-center">
                            <a href="index.html">Home<span class="lnr lnr-arrow-right"></span></a>
                            <a href="single-product.html">Checkout</a>
                        </nav>
                    </div>
                </div>
            </div>
        </section>
        <!-- End Banner Area -->

        <!--================Checkout Area =================-->
        <section class="checkout_area section_gap">
            <div class="container">
                <form id="checkoutForm">
                    <div class="row">
                        <div class="col-md-6">
                            <h3>Choose Address</h3>
                            <div class="address-list border p-3">
                                <% if(user && user.address) { %>
                                    <% user.address.forEach((address, index)=> { %>
                                        <div class="address-item border p-3">
                                            <label>
                                                <input type="radio" name="address"
                                                    value="<%= address.name %> <%= address.houseName %> <%= address.city %> <%= address.state %> <%= address.mobile %> <%= address.pincode %>">
                                                <span>
                                                    <%= address.name %>
                                                </span>&nbsp;
                                                <span>
                                                    <%= address.houseName %>
                                                </span>&nbsp;
                                                <span>
                                                    <%= address.city %>
                                                </span>&nbsp;
                                                <span>
                                                    <%= address.state %>
                                                </span>&nbsp;
                                                <span>
                                                    <%= address.mobile %>
                                                </span>&nbsp;
                                                <span>
                                                    <%= address.pincode %>
                                                </span>
                                                <!-- <span class="ml-4"><a href="/editAddress/<%= address._id %>" class="edit-icon " style="color:orange">
                                                    <i class="fas fa-edit "></i>
                                                </a></span> -->
                                            </label>

                                        </div>
                                        <% }) %>
                                            <% } %>
                            </div>
                            <br>
                            <div class="col-md-12">
                                <a href="/address?source=checkout" class="genric-btn info radius">Add Address</a>
                            </div>
                            <br>
                        </div>


                        <div class="col-md-6">
                            <div class="order_box">
                                <h2>Your Order</h2>
                                <ul class="list">
                                    <li><a href="#">Product <span>Total</span></a></li>
                                    <% if (cart && cart.items) { %>
                                        <% cart.items.forEach(item=> { %>
                                            <li><a href="#">
                                                    <% if (item.productId && item.productId.name) { %>
                                                        <%= item.productId.name %><span class="middle">x <%=
                                                                    item.quantity %></span> <span class="last">â‚¹<%=
                                                                    item.totalPrice %></span>
                                                            <% } else { %>
                                                                Product not available
                                                                <% } %>
                                                </a></li>
                                            <% }); %>
                                                <% } else { %>
                                                    <li>No items in the cart</li>
                                                    <% } %>
                                </ul>

                                <ul class="list list_2">
                                    <li><a href="#">Shipping <span> â‚¹00.00</span></a></li>
                                    <li><a href="#">Total <span id="subtotalAmount">â‚¹<%= subTotal %></span></a></li>
                                    <li><a href="#">Discount Amount <span id="discountAmount">â‚¹00.00</span></a></li>
                                    <li><a href="#">Subtotal <span id="totalAmount">â‚¹<%= subTotal %></span></a></li>
                                </ul>
                                <div class="payment_item">
                                    <div class="radion_btn">
                                        <input type="radio" id="f-option1" name="paymentMethod" value="COD">
                                        <label for="f-option1">Cash On Delivery</label>
                                        <div class="check"></div>
                                    </div>
                                </div>

                                <div class="payment_item">
                                    <div class="radion_btn">
                                        <input type="radio" id="f-option2" name="paymentMethod" value="RAZORPAY">
                                        <label for="f-option2">Razorpay</label>
                                        <div class="check"></div>
                                    </div>
                                </div>
                                <div class="payment_item">
                                    <div class="radion_btn">
                                        <input type="radio" id="f-option3" name="paymentMethod" value="WALLET">
                                        <label for="f-option3"> Wallet <span id="walletBalanceLabel">(Balance: â‚¹<%=
                                                    user.wallet %>)</span></label>
                                        <div class="check"></div>
                                    </div>
                                </div>
                                <!-- Add to Wallet button with inline style for smaller size -->
                                <div class="add-to-wallet">
                                    <button type="button" id="addToWalletButton" class="btn-outline-success mb-2"
                                        style="padding: 0px 10px; font-size: 14px;  ">Add to Wallet</button>
                                </div>

                                <div class="cupon_text d-flex align-items-center">
                                    <input type="text" id="couponCodeInput" placeholder="Coupon Code"
                                        style="height: 36px;">&nbsp;
                                    <a class="primary-btn btn-sm" id="applyCouponButton" href="#">Apply</a>&nbsp;
                                    <a class="gray_btn" href="#" data-toggle="modal"
                                        data-target="#couponModal">Choose</a>
                                    <input type="hidden" id="appliedCoupon" name="appliedCoupon" value="">
                                </div><br>

                                <button type="button" id="placeorderButton" class="primary-btn">Place order</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </section>


        <!-- section for the modal -->
        <div class="modal fade" id="couponModal" tabindex="-1" role="dialog" aria-labelledby="couponModalLabel"
            aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content bg-light">
                    <div class="modal-header">
                        <h3 class="modal-title text-muted" id="couponModalLabel">Available Coupons</h3>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <% coupons.forEach(coupon=> { %>
                            <div class="coupon-container mb-3 p-3 border rounded">
                                <p class="text-success">
                                    <%= coupon.couponName %>
                                </p>
                                <h4>CODE : <strong class="text-danger">
                                        <%= coupon.couponCode %>
                                    </strong></h4>
                                <p class="text-muted">
                                    <%= coupon.description %><br>
                                        Minimum Amount: <%= coupon.minAmount %><br>
                                            Discount Amount: <%= coupon.discountAmount %>
                                </p>
                            </div>
                            <% }); %>
                    </div>
                </div>
            </div>
        </div>

        <!--================End Checkout Area =================-->

        <%- include('../layout/userLayouts/footer') -%>
            <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const placeOrderButton = document.getElementById('placeorderButton');
                    const applyCouponButton = document.getElementById('applyCouponButton');

                    function getQueryParam(name) {
                        const urlParams = new URLSearchParams(window.location.search);
                        return urlParams.get(name);
                    }

                    const orderId = getQueryParam('orderId');
                    applyCouponButton.addEventListener('click', applyCoupon);
                    placeOrderButton.addEventListener('click', async function () {
                        console.log('place order button clicked ')
                        try {
                            const selectedAddressInput = document.querySelector('input[name="address"]:checked');
                            const selectedPaymentMethodInput = document.querySelector('input[name="paymentMethod"]:checked');
                            if (selectedPaymentMethodInput && selectedPaymentMethodInput.value === 'WALLET') {
                                // Wallet is selected, check balance
                                const walletBalance = <%= user.wallet %>;
                                const subTotal = <%= subTotal %>;

                                if (walletBalance < subTotal) {
                                    // Wallet balance is not sufficient, show SweetAlert
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Not enough balance',
                                        text: 'Your wallet balance is not sufficient. Please choose another payment method.',
                                    });
                                    return;
                                }
                            }
                            const couponCode = document.getElementById('appliedCoupon').value

                            if (!selectedAddressInput) {
                                console.error('Please choose an address before placing the order!');
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Address not selected',
                                    text: 'Please choose an address before placing the order!',
                                });
                                return;
                            }

                            if (!selectedPaymentMethodInput) {
                                console.error('Please choose a payment method before placing the order!');
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment method not selected',
                                    text: 'Please choose a payment method before placing the order!',
                                });
                                return;
                            }


                            const address = selectedAddressInput.value;
                            const paymentMethod = selectedPaymentMethodInput.value;

                            const response = await fetch('/placeOrder', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ address, paymentMethod, couponCode }),
                            });

                            const responseData = await response.json();

                            if (responseData.success) {
                                console.log('Order placed successfully. Redirecting to confirmation page.');
                                window.location.href = '/confirmation?orderId=' + responseData.orderId;
                            } else {
                                if (responseData.error === "One or more products in your cart have insufficient stock.") {
                                    console.error('Insufficient Stock:', responseData.error);
                                    Swal.fire({
                                        title: "Insufficient Stock",
                                        text: "One or more products in your cart have insufficient stock or unavailable.",
                                        icon: "error",
                                        button: "OK",
                                    });

                                } else {
                                    console.log('Razorpay payment initiation...');
                                    razorpayPayment(responseData.order);
                                }
                            }
                        } catch (error) {
                            console.error('An unexpected error occurred:', error);
                            alert('An unexpected error occurred. Please try again.');
                        }
                    });

                    function razorpayPayment(order) {
                        console.log('razorPayment order :', order);
                        var options = {
                            "key": "rzp_test_h6GOIv1Khv2rKn", // Enter the Key ID generated from the Dashboard
                            "amount": order.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
                            "currency": "INR",
                            "name": "Acme Corp", //your business name
                            "description": "Test Transaction",
                            "image": "https://example.com/your_logo",
                            "order_id": order.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
                            "handler": function (response) {
                                console.log('Razorpay handler called with response:', response);
                                verifyPayment(response, order)
                            },
                            "prefill": { //We recommend using the prefill parameter to auto-fill customer's contact information especially their phone number
                                "name": "Gaurav Kumar", //your customer's name
                                "email": "gaurav.kumar@example.com",
                                "contact": "9000090000" //Provide the customer's phone number for better conversion rates 
                            },
                            "notes": {
                                "address": "Razorpay Corporate Office"
                            },
                            "theme": {
                                "color": "#3399cc"
                            }
                        };
                        var rzp1 = new Razorpay(options);
                        rzp1.open();
                    }

                    function verifyPayment(payment, order) {
                        $.ajax({
                            url: '/verifyPayment',
                            data: {
                                payment,
                                order
                            },
                            method: 'post',
                            success: (response) => {
                                console.log('verify payment response', response)
                                if (response.success) {
                                    location.href = '/confirmation?orderId=' + response.order.orderId
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment has failed',
                                        showConfirmButton: false,
                                        timer: 1500
                                    })
                                }
                            }
                        })
                    }


                    // Apply Coupon
                    async function applyCoupon(event) {
                        event.preventDefault();
                        const couponCodeInput = document.getElementById('couponCodeInput');
                        const couponCode = couponCodeInput.value.trim();
                        console.log(couponCode);
                        try {
                            const subTotal = <%= subTotal %>;

                            const response = await axios.post('/applyCoupon', { couponCode, subTotal });

                            if (response.data.applied) {
                                handleCouponApplied(response.data);
                                document.getElementById('appliedCoupon').value = couponCode;
                            } else {
                                handleCouponError(response.data);
                            }
                        } catch (error) {
                            console.error('An error occurred:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'An unexpected error occurred. Please try again.',
                            });
                        }
                    }

                    // Function to handle successful coupon application
                    function handleCouponApplied(data) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Coupon applied successfully!',
                        });

                        // Update the displayed total and amount
                        const discountedTotal = data.discountedTotal;
                        const discountAmount = data.discountAmount;

                        // Update HTML elements with the new values
                        document.getElementById('discountAmount').textContent = `â‚¹${discountAmount}`;
                        document.getElementById('totalAmount').textContent = `â‚¹${discountedTotal}`;
                    }

                    // Function to handle coupon-related errors
                    function handleCouponError(data) {
                        const { expired, wrongCoupon, minAmountError } = data;

                        if (expired) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Coupon has expired.',
                            });
                        } else if (wrongCoupon) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Invalid coupon code.',
                            });
                        } else if (minAmountError) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: minAmountError,
                            });
                        } else if (data.couponClaimed) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Oops...',
                                text: 'Coupon has already been used.',
                            });
                        } else {
                            // Handle other coupon-related errors if needed
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Failed to apply coupon.',
                            });
                        }
                    }

                });

                document.addEventListener('DOMContentLoaded', function () {
                    const addToWalletButton = document.getElementById('addToWalletButton');

                    addToWalletButton.addEventListener('click', async function () {
                        try {
                            // Use SweetAlert to get the amount from the user
                            const { value: amount } = await Swal.fire({
                                title: 'Enter the amount to add to your wallet',
                                input: 'text', // Use 'text' instead of 'number'
                                inputAttributes: {
                                    min: 0,
                                    step: 0.01, // Optional: You can adjust the step value based on your requirements
                                    inputMode: 'decimal', // Allow decimal input
                                },
                                showCancelButton: true,
                                confirmButtonText: 'Add to Wallet',
                            });

                            if (amount === undefined || isNaN(amount) || amount <= 0) {
                                Swal.fire('Invalid amount', 'Please enter a valid positive amount.', 'error');
                                return;
                            }
                            const response = await axios.post('/addToWallet', { amount });

                            if (response.data.success === true) {
                                initiateRazorpayForWallet(response.data.payment);

                            } else {
                                window.location.href = '/checkout';
                            }
                        } catch (error) {
                            console.error('An unexpected error occurred:', error);
                            alert('An unexpected error occurred. Please try again.');
                        }
                    });

                });

                function initiateRazorpayForWallet(payment) {
                    console.log('razorPayment order :', payment);
                    var options = {
                        "key": "rzp_test_h6GOIv1Khv2rKn", // Enter the Key ID generated from the Dashboard
                        "amount": payment.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
                        "currency": "INR",
                        "name": "Acme Corp", //your business name
                        "description": "Test Transaction",
                        "image": "https://example.com/your_logo",
                        "order_id": payment.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
                        "handler": function (response) {
                            console.log('Razorpay handler called with response:', response);
                            verifyRazorpayForWallet(response, payment)
                        },
                        "prefill": { //We recommend using the prefill parameter to auto-fill customer's contact information especially their phone number
                            "name": "Gaurav Kumar", //your customer's name
                            "email": "gaurav.kumar@example.com",
                            "contact": "9000090000" //Provide the customer's phone number for better conversion rates 
                        },
                        "notes": {
                            "address": "Razorpay Corporate Office"
                        },
                        "theme": {
                            "color": "#3399cc"
                        }
                    };
                    var rzp1 = new Razorpay(options);
                    rzp1.open();
                }

                async function verifyRazorpayForWallet(razorpay, payment) {


                    console.log('raz', razorpay, 'pay', payment);
                    const response = await axios.post('/verifyAddToWallet', { razorpay, payment })
                    if (response.data.success == true) {
                        window.location.href = '/checkout'
                    } else {
                        window.location.href = '/checkout'
                        alert('Payment Failed');
                    }

                }


            </script>